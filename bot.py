from random import randint
import sqlite3
from aiogram.types import update

import config
import logging
import asyncio
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter

# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')

button_hi = KeyboardButton('–ê–¥—Ä–µ—Å üó∫')
button_num = KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû')
button_site = KeyboardButton('–°–∞–π—Ç üè™')
button_info = KeyboardButton('–ò–Ω—Ñ–æ')
greet_kb = ReplyKeyboardMarkup()
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_hi, button_num, button_site, button_info)

# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
#@dp.message_handler(commands=['subscribe'])
@dp.callback_query_handler(text="subscribe")
async def subscribe(message: types.Message):
    
    if (not db.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, True)

    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ –æ–±–∑–æ—Ä—ã –∏ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–∏—Ö –ø–µ—Ä–≤—ã–º–∏ =)")

@dp.message_handler(lambda message: message.text == "–ê–¥—Ä–µ—Å üó∫")
async def with_puree(message: types.Message):
    await message.reply('–ê–¥—Ä–µ—Å: \n–ö–∏—Ç–∞–π, –ì–∏–º–∞–ª–∞–∏, —Ö—Ä–µ–±–µ—Ç –ú–∞—Ö–∞–ª–∞–Ω–≥—É—Ä-–•–∏–º–∞–ª, –≤–µ—Ä—à–∏–Ω–∞ –≠–≤–µ—Ä–µ—Å—Ç, –¥. 1\nhttps://yandex.ru/maps/org/1179483603')

@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû")
async def with_puree(message: types.Message):
    await message.reply('–¢–µ–ª–µ—Ñ–æ–Ω: +375 (44) 559-00-01')

@dp.message_handler(lambda message: message.text == "–°–∞–π—Ç üè™")
async def with_puree(message: types.Message):
    await message.reply('–°–∞–π—Ç:\nhttps://yandex.ru/maps/org/1179483603')

@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ")
async def with_puree(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe"))
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe"))
    await message.answer("–£–∑–Ω–∞–≤–∞–π –ø—Ä–æ –≤—Å–µ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏ –ø–µ—Ä–≤—ã–º!", reply_markup=keyboard)

@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10)))


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ - –ë—É–¥—å –∑–¥–æ—Ä–æ–≤!\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µ!", reply_markup=greet_kb)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
#@dp.message_handler(commands=['unsubscribe'])
@dp.callback_query_handler(text="unsubscribe")
async def unsubscribe(message: types.Message):
    if (not db.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")



# —Ç–µ—Å—Ç —Ç–∞–π–º–µ—Ä
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        sqlite_connection = sqlite3.connect('db.db')
        cursor = sqlite_connection.cursor()

        sqlite_select_query = """SELECT * from news"""
        cursor.execute(sqlite_select_query)
        records = cursor.fetchall()
        str1 = ''.join(records)
        #message = records[1] + records[2] + records[4]

        await bot.send_message(251834774, "ti debil", disable_notification = True)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':

    loop = asyncio.get_event_loop()
    task1 = loop.create_task(scheduled(10))
    executor.start_polling(dp, skip_updates= True)
